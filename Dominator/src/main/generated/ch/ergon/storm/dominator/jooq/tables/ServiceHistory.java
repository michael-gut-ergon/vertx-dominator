/**
 * This class is generated by jOOQ
 */
package ch.ergon.storm.dominator.jooq.tables;


import ch.ergon.storm.dominator.jooq.Keys;
import ch.ergon.storm.dominator.jooq.Sab;
import ch.ergon.storm.dominator.jooq.enums.ServiceState;
import ch.ergon.storm.dominator.jooq.tables.records.ServiceHistoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceHistory extends TableImpl<ServiceHistoryRecord> {

    private static final long serialVersionUID = 306078907;

    /**
     * The reference instance of <code>sab.service_history</code>
     */
    public static final ServiceHistory SERVICE_HISTORY = new ServiceHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceHistoryRecord> getRecordType() {
        return ServiceHistoryRecord.class;
    }

    /**
     * The column <code>sab.service_history.id</code>.
     */
    public final TableField<ServiceHistoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('service_history_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sab.service_history.service</code>.
     */
    public final TableField<ServiceHistoryRecord, Integer> SERVICE = createField("service", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sab.service_history.description</code>.
     */
    public final TableField<ServiceHistoryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.service_history.valid_from</code>.
     */
    public final TableField<ServiceHistoryRecord, Timestamp> VALID_FROM = createField("valid_from", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_history.valid_until</code>.
     */
    public final TableField<ServiceHistoryRecord, Timestamp> VALID_UNTIL = createField("valid_until", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_history.state</code>.
     */
    public final TableField<ServiceHistoryRecord, ServiceState> STATE = createField("state", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(ServiceState.class), this, "");

    /**
     * The column <code>sab.service_history.inserted</code>.
     */
    public final TableField<ServiceHistoryRecord, Timestamp> INSERTED = createField("inserted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sab.service_history.useri</code>.
     */
    public final TableField<ServiceHistoryRecord, String> USERI = createField("useri", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>sab.service_history.updated</code>.
     */
    public final TableField<ServiceHistoryRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_history.useru</code>.
     */
    public final TableField<ServiceHistoryRecord, String> USERU = createField("useru", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>sab.service_history</code> table reference
     */
    public ServiceHistory() {
        this("service_history", null);
    }

    /**
     * Create an aliased <code>sab.service_history</code> table reference
     */
    public ServiceHistory(String alias) {
        this(alias, SERVICE_HISTORY);
    }

    private ServiceHistory(String alias, Table<ServiceHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceHistory(String alias, Table<ServiceHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sab.SAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServiceHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVICE_HISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceHistoryRecord> getPrimaryKey() {
        return Keys.SERVICE_HISTORY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceHistoryRecord>>asList(Keys.SERVICE_HISTORY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceHistory as(String alias) {
        return new ServiceHistory(alias, this);
    }

    /**
     * Rename this table
     */
    public ServiceHistory rename(String name) {
        return new ServiceHistory(name, null);
    }
}
