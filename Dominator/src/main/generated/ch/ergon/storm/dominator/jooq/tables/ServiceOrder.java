/**
 * This class is generated by jOOQ
 */
package ch.ergon.storm.dominator.jooq.tables;


import ch.ergon.storm.dominator.jooq.Keys;
import ch.ergon.storm.dominator.jooq.Sab;
import ch.ergon.storm.dominator.jooq.enums.OrderState;
import ch.ergon.storm.dominator.jooq.tables.records.ServiceOrderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceOrder extends TableImpl<ServiceOrderRecord> {

    private static final long serialVersionUID = 1900455874;

    /**
     * The reference instance of <code>sab.service_order</code>
     */
    public static final ServiceOrder SERVICE_ORDER = new ServiceOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceOrderRecord> getRecordType() {
        return ServiceOrderRecord.class;
    }

    /**
     * The column <code>sab.service_order.id</code>.
     */
    public final TableField<ServiceOrderRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('service_order_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sab.service_order.name</code>.
     */
    public final TableField<ServiceOrderRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.service_order.uuid</code>.
     */
    public final TableField<ServiceOrderRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.service_order.ext_id</code>.
     */
    public final TableField<ServiceOrderRecord, String> EXT_ID = createField("ext_id", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.service_order.customer</code>.
     */
    public final TableField<ServiceOrderRecord, Integer> CUSTOMER = createField("customer", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sab.service_order.product</code>.
     */
    public final TableField<ServiceOrderRecord, Integer> PRODUCT = createField("product", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sab.service_order.service_parameter</code>.
     */
    public final TableField<ServiceOrderRecord, Integer> SERVICE_PARAMETER = createField("service_parameter", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sab.service_order.production_start</code>.
     */
    public final TableField<ServiceOrderRecord, Timestamp> PRODUCTION_START = createField("production_start", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_order.production_end</code>.
     */
    public final TableField<ServiceOrderRecord, Timestamp> PRODUCTION_END = createField("production_end", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_order.state</code>.
     */
    public final TableField<ServiceOrderRecord, OrderState> STATE = createField("state", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(OrderState.class), this, "");

    /**
     * The column <code>sab.service_order.inserted</code>.
     */
    public final TableField<ServiceOrderRecord, Timestamp> INSERTED = createField("inserted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sab.service_order.useri</code>.
     */
    public final TableField<ServiceOrderRecord, String> USERI = createField("useri", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>sab.service_order.updated</code>.
     */
    public final TableField<ServiceOrderRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_order.useru</code>.
     */
    public final TableField<ServiceOrderRecord, String> USERU = createField("useru", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>sab.service_order</code> table reference
     */
    public ServiceOrder() {
        this("service_order", null);
    }

    /**
     * Create an aliased <code>sab.service_order</code> table reference
     */
    public ServiceOrder(String alias) {
        this(alias, SERVICE_ORDER);
    }

    private ServiceOrder(String alias, Table<ServiceOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceOrder(String alias, Table<ServiceOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sab.SAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServiceOrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVICE_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceOrderRecord> getPrimaryKey() {
        return Keys.SERVICE_ORDER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceOrderRecord>>asList(Keys.SERVICE_ORDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceOrder as(String alias) {
        return new ServiceOrder(alias, this);
    }

    /**
     * Rename this table
     */
    public ServiceOrder rename(String name) {
        return new ServiceOrder(name, null);
    }
}
