/**
 * This class is generated by jOOQ
 */
package ch.ergon.storm.dominator.jooq.tables;


import ch.ergon.storm.dominator.jooq.Keys;
import ch.ergon.storm.dominator.jooq.Sab;
import ch.ergon.storm.dominator.jooq.enums.FactoryParameterType;
import ch.ergon.storm.dominator.jooq.enums.FactoryType;
import ch.ergon.storm.dominator.jooq.tables.records.FactoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Factory extends TableImpl<FactoryRecord> {

    private static final long serialVersionUID = -405105009;

    /**
     * The reference instance of <code>sab.factory</code>
     */
    public static final Factory FACTORY = new Factory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FactoryRecord> getRecordType() {
        return FactoryRecord.class;
    }

    /**
     * The column <code>sab.factory.id</code>.
     */
    public final TableField<FactoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('factory_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sab.factory.name</code>.
     */
    public final TableField<FactoryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.factory.factory_type</code>.
     */
    public final TableField<FactoryRecord, FactoryType> FACTORY_TYPE = createField("factory_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(FactoryType.class), this, "");

    /**
     * The column <code>sab.factory.parameter_type</code>.
     */
    public final TableField<FactoryRecord, FactoryParameterType> PARAMETER_TYPE = createField("parameter_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(FactoryParameterType.class), this, "");

    /**
     * The column <code>sab.factory.server</code>.
     */
    public final TableField<FactoryRecord, String> SERVER = createField("server", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.port</code>.
     */
    public final TableField<FactoryRecord, Integer> PORT = createField("port", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sab.factory.create_url</code>.
     */
    public final TableField<FactoryRecord, String> CREATE_URL = createField("create_url", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.cancel_url</code>.
     */
    public final TableField<FactoryRecord, String> CANCEL_URL = createField("cancel_url", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.activate_url</code>.
     */
    public final TableField<FactoryRecord, String> ACTIVATE_URL = createField("activate_url", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.suspend_url</code>.
     */
    public final TableField<FactoryRecord, String> SUSPEND_URL = createField("suspend_url", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.update_url</code>.
     */
    public final TableField<FactoryRecord, String> UPDATE_URL = createField("update_url", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.monitoring_url</code>.
     */
    public final TableField<FactoryRecord, String> MONITORING_URL = createField("monitoring_url", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.factory.monitoring_port</code>.
     */
    public final TableField<FactoryRecord, Integer> MONITORING_PORT = createField("monitoring_port", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sab.factory.inserted</code>.
     */
    public final TableField<FactoryRecord, Timestamp> INSERTED = createField("inserted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sab.factory.useri</code>.
     */
    public final TableField<FactoryRecord, String> USERI = createField("useri", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>sab.factory.updated</code>.
     */
    public final TableField<FactoryRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.factory.useru</code>.
     */
    public final TableField<FactoryRecord, String> USERU = createField("useru", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>sab.factory</code> table reference
     */
    public Factory() {
        this("factory", null);
    }

    /**
     * Create an aliased <code>sab.factory</code> table reference
     */
    public Factory(String alias) {
        this(alias, FACTORY);
    }

    private Factory(String alias, Table<FactoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Factory(String alias, Table<FactoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sab.SAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FactoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FACTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FactoryRecord> getPrimaryKey() {
        return Keys.FACTORY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FactoryRecord>> getKeys() {
        return Arrays.<UniqueKey<FactoryRecord>>asList(Keys.FACTORY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Factory as(String alias) {
        return new Factory(alias, this);
    }

    /**
     * Rename this table
     */
    public Factory rename(String name) {
        return new Factory(name, null);
    }
}
