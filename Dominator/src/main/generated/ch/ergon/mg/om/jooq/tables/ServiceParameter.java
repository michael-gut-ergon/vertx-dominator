/**
 * This class is generated by jOOQ
 */
package ch.ergon.mg.om.jooq.tables;


import ch.ergon.mg.om.jooq.Keys;
import ch.ergon.mg.om.jooq.Sab;
import ch.ergon.mg.om.jooq.enums.ServiceParameterType;
import ch.ergon.mg.om.jooq.tables.records.ServiceParameterRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceParameter extends TableImpl<ServiceParameterRecord> {

    private static final long serialVersionUID = 93685305;

    /**
     * The reference instance of <code>sab.service_parameter</code>
     */
    public static final ServiceParameter SERVICE_PARAMETER = new ServiceParameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceParameterRecord> getRecordType() {
        return ServiceParameterRecord.class;
    }

    /**
     * The column <code>sab.service_parameter.id</code>.
     */
    public final TableField<ServiceParameterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('service_parameter_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sab.service_parameter.service_parameter_batch</code>.
     */
    public final TableField<ServiceParameterRecord, Integer> SERVICE_PARAMETER_BATCH = createField("service_parameter_batch", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sab.service_parameter.name</code>.
     */
    public final TableField<ServiceParameterRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.service_parameter.parameter_value</code>.
     */
    public final TableField<ServiceParameterRecord, String> PARAMETER_VALUE = createField("parameter_value", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.service_parameter.parameter_type</code>.
     */
    public final TableField<ServiceParameterRecord, ServiceParameterType> PARAMETER_TYPE = createField("parameter_type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(ch.ergon.mg.om.jooq.enums.ServiceParameterType.class), this, "");

    /**
     * The column <code>sab.service_parameter.uuid</code>.
     */
    public final TableField<ServiceParameterRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>sab.service_parameter.ext_id</code>.
     */
    public final TableField<ServiceParameterRecord, String> EXT_ID = createField("ext_id", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>sab.service_parameter.inserted</code>.
     */
    public final TableField<ServiceParameterRecord, Timestamp> INSERTED = createField("inserted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sab.service_parameter.useri</code>.
     */
    public final TableField<ServiceParameterRecord, String> USERI = createField("useri", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>sab.service_parameter.updated</code>.
     */
    public final TableField<ServiceParameterRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>sab.service_parameter.useru</code>.
     */
    public final TableField<ServiceParameterRecord, String> USERU = createField("useru", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>sab.service_parameter</code> table reference
     */
    public ServiceParameter() {
        this("service_parameter", null);
    }

    /**
     * Create an aliased <code>sab.service_parameter</code> table reference
     */
    public ServiceParameter(String alias) {
        this(alias, SERVICE_PARAMETER);
    }

    private ServiceParameter(String alias, Table<ServiceParameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceParameter(String alias, Table<ServiceParameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sab.SAB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServiceParameterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVICE_PARAMETER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceParameterRecord> getPrimaryKey() {
        return Keys.SERVICE_PARAMETER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceParameterRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceParameterRecord>>asList(Keys.SERVICE_PARAMETER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceParameter as(String alias) {
        return new ServiceParameter(alias, this);
    }

    /**
     * Rename this table
     */
    public ServiceParameter rename(String name) {
        return new ServiceParameter(name, null);
    }
}
