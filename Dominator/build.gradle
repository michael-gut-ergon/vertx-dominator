plugins {
	id 'java'
	id 'application'
	id 'com.github.johnrengelman.shadow' version '1.2.3'
	id "org.flywaydb.flyway" version "4.0.3"
	id "nu.studer.jooq" version "2.0.2"
}

apply plugin: 'eclipse'
apply plugin: 'org.flywaydb.flyway'

description = 'Dominator'
group = 'ch.ergon.storm.dominator'
version = '1.0.0'

repositories {
	jcenter()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

project.ext {
	configPath = "$rootProject.projectDir/src/main/resources/"
	jooqGeneratedDir = 'src/main/generated'
    postgresqlVersion = '9.1-901.jdbc4'
    vertxVersion = '3.3.3'
}

dependencies {
	compile "io.vertx:vertx-core:$vertxVersion"
	compile "io.vertx:vertx-web:$vertxVersion"
	compile "io.vertx:vertx-hazelcast:$vertxVersion"
	compile "io.vertx:vertx-dropwizard-metrics:$vertxVersion"
	compile "org.yaml:snakeyaml:1.17" 
	compile "org.flywaydb:flyway-core:4.0.3"
	compile "postgresql:postgresql:$postgresqlVersion" 
	compile "org.jooq:jooq" 
	jooqRuntime("postgresql:postgresql:$postgresqlVersion")
	
	testCompile 'junit:junit:4.12'
}

flyway {
    url = 'jdbc:postgresql://localhost:15000/dominator'
    user = 'dominator'
    password = 'w0rld'
    schemas = ['dominator']
}

sourceSets {
    main {
        java {
            srcDirs += [jooqGeneratedDir]
        }
    }
}

clean.doLast {
   project.file(jooqGeneratedDir).deleteDir()
}

jooq {
  version = '3.8.5'
  edition = 'OSS'
  om(sourceSets.main) {
       jdbc {
           driver = 'org.postgresql.Driver'
           url = 'jdbc:postgresql://localhost:15000/dominator'
           user = 'dominator'
           password = 'w0rld'
           schema = 'dominator'
       }
       generator {
           name = 'org.jooq.util.DefaultGenerator'
           strategy {
               name = 'org.jooq.util.DefaultGeneratorStrategy'
           }
           database {
               name = 'org.jooq.util.postgres.PostgresDatabase'
               inputSchema = 'dominator'
           }
           generate {
               relations = true
               deprecated = false
               records = true
               pojos = true
               fluentSetters = true
           }
           target {
               packageName = 'ch.ergon.storm.dominator.jooq'
               directory = jooqGeneratedDir
           }
       }
   }
}
generateOmJooqSchemaSource.onlyIf { project.hasProperty('generateJooq') }

mainClassName = 'ch.ergon.storm.dominator.DominatorApp'

run {
    args 'server', configPath + 'app_config.yml'
}

shadowJar {
	classifier = 'fat'
	mergeServiceFiles {
		include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.8'
}

task copyTarToRelease(type: Copy) {
    from("$projectDir/build/distributions") {
        include '**/*.tar'
    }
    into "$projectDir/dockerCloud"
}

distTar.finalizedBy(copyTarToRelease)

distributions {
    main {
        contents {
            from { 'webroot' }
        }
    }
}
